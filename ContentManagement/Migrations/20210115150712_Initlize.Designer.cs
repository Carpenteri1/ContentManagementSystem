// <auto-generated />
using System;
using ContentManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContentManagement.Migrations
{
    [DbContext(typeof(CMSDbContext))]
    [Migration("20210115150712_Initlize")]
    partial class Initlize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ContentManagement.Models.Account.Users", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLoggedIn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UserCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UserEdited")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ContentManagement.Models.Content.HeaderMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("StartPageId")
                        .HasColumnType("int");

                    b.Property<int>("StartPage_FK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StartPageId");

                    b.ToTable("HeaderMenus");
                });

            modelBuilder.Entity("ContentManagement.Models.Content.HeaderTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Edited")
                        .HasColumnType("datetime");

                    b.Property<int?>("HeaderMenuId")
                        .HasColumnType("int");

                    b.Property<int>("HeaderMenuId_FK")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .HasColumnType("text");

                    b.Property<int>("UserId_FK")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeaderMenuId");

                    b.HasIndex("UsersId");

                    b.ToTable("HeaderTitles");
                });

            modelBuilder.Entity("ContentManagement.Models.Content.StartPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StartPages");
                });

            modelBuilder.Entity("ContentManagement.Models.Content.StartPage_ImgContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("text");

                    b.Property<int?>("StartPageId")
                        .HasColumnType("int");

                    b.Property<int>("StartPageId_FK")
                        .HasColumnType("int");

                    b.Property<DateTime>("Uploaded")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId_FK")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StartPageId");

                    b.HasIndex("UsersId");

                    b.ToTable("StartPage_ImgContents");
                });

            modelBuilder.Entity("ContentManagement.Models.Content.StartPage_TextContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Edited")
                        .HasColumnType("datetime");

                    b.Property<int?>("StartPageId")
                        .HasColumnType("int");

                    b.Property<int>("StartPageId_FK")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .HasColumnType("text");

                    b.Property<int>("UserId_FK")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StartPageId");

                    b.HasIndex("UsersId");

                    b.ToTable("StartPage_TextContents");
                });

            modelBuilder.Entity("ContentManagement.Models.Content.StartPage_TitleContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Edited")
                        .HasColumnType("datetime");

                    b.Property<int?>("StartPageId")
                        .HasColumnType("int");

                    b.Property<int>("StartPageId_FK")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .HasColumnType("text");

                    b.Property<int>("UserId_FK")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StartPageId");

                    b.HasIndex("UsersId");

                    b.ToTable("StartPage_TitleContents");
                });

            modelBuilder.Entity("ContentManagement.Models.Content.HeaderMenu", b =>
                {
                    b.HasOne("ContentManagement.Models.Content.StartPage", "StartPage")
                        .WithMany()
                        .HasForeignKey("StartPageId");
                });

            modelBuilder.Entity("ContentManagement.Models.Content.HeaderTitle", b =>
                {
                    b.HasOne("ContentManagement.Models.Content.HeaderMenu", "HeaderMenu")
                        .WithMany("HeaderTitles")
                        .HasForeignKey("HeaderMenuId");

                    b.HasOne("ContentManagement.Models.Account.Users", "Users")
                        .WithMany("HeaderTitles")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("ContentManagement.Models.Content.StartPage_ImgContent", b =>
                {
                    b.HasOne("ContentManagement.Models.Content.StartPage", "StartPage")
                        .WithMany("StartPage_ImgContents")
                        .HasForeignKey("StartPageId");

                    b.HasOne("ContentManagement.Models.Account.Users", "Users")
                        .WithMany("StartPage_ImgContents")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("ContentManagement.Models.Content.StartPage_TextContent", b =>
                {
                    b.HasOne("ContentManagement.Models.Content.StartPage", "StartPage")
                        .WithMany("StartPage_TextContents")
                        .HasForeignKey("StartPageId");

                    b.HasOne("ContentManagement.Models.Account.Users", "Users")
                        .WithMany("StartPage_TextContents")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("ContentManagement.Models.Content.StartPage_TitleContent", b =>
                {
                    b.HasOne("ContentManagement.Models.Content.StartPage", "StartPage")
                        .WithMany("StartPage_TitleContents")
                        .HasForeignKey("StartPageId");

                    b.HasOne("ContentManagement.Models.Account.Users", "Users")
                        .WithMany("StartPage_Titles")
                        .HasForeignKey("UsersId");
                });
#pragma warning restore 612, 618
        }
    }
}
